// includeConfig "${baseDir}/conf/modules.config"
includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/modules.config"
includeConfig "${baseDir}/conf/LIMS_API.config"

params {
    ref_conf = "${baseDir}/conf/reference.json"
    max_memory = 256.GB
    max_cpus = 32
    max_time = 240.h
    conda_env_path = ""
    wgs_dest_path = ''
    project_path = ''
    aligner = 'iSAAC' // you can use 'bwa' instead
    // aligner = 'bwa'

    lims_qc = true // if you want to use LIMS QC, set to true
    target_x = 5 // target coverage human depth of subsampled reads
    merge_flag = false
    // QC parameters
    freemix_limit = 0.05 // upper limit of free mix
    mapping_rate_limit = 88 // lower limit of mapping rate
    deduplicate_rate_limit = 78 // lower limit of deduplicate rate
}

profiles {
    sge { 
        conda.enabled = true
        process {
            executor = 'sge'
            errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
            maxRetries = 2
            queue = 'all.q'
            penv = 'smp'
            clusterOptions = { "-cwd -v PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:\$PATH -pe peXMAS ${task.cpus} -S /bin/bash" }
        }
    }
    test {
        conda.enabled = true
        process {
            executor = 'local'
            errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
            maxRetries = 2
        }
        params {
            max_memory = 8.GB
            max_cpus = 2
            max_time = 3.h
            target_x = 1
            outdir = './results'
            sample_sheet = ''
            backup_script = ''
            order_info = ''
        }
    }
}



env {
    GATK3 = "${baseDir}/apps/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar"
}

report.overwrite = true
timeline.overwrite = true
dag.overwrite = true
trace.overwrite = true

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
cleanup = true
