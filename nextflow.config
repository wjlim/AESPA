// includeConfig "${baseDir}/conf/modules.config"
includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/modules.config"

manifest {
    name            = 'AESPA'
    author          = 'Wonjun Lim'
    homePage        = 'https://github.com/wjlim/AESPA'
    description     = 'Accurate and Efficient Sub-sampling Pipeline for WGS Analysis'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}

params {
    name = manifest.name + '_' + manifest.version
    // Schema validation
    validationSchemaFile = "${projectDir}/nextflow_schema.json"
    validationFailUnrecognisedParams = false
    validationLenientMode = false
    validate_params = true
    aligner = 'iSAAC'
    // Genome references
    genome = null
    fasta = null
    fai = null
    dict = null
    bwamem2_index = null
    igenomes_base = 's3://ngi-igenomes/igenomes'
    igenomes_ignore = false

    // Main options
    max_memory = 210.GB
    max_cpus = 32
    max_time = 240.h
    conda_env_path = ""
    wgs_dest_path = ''
    project_path = ''
    // aligner = 'bwa' // default aligner is bwa
    merge_flag = false // if you want to use only merge mode, set to true
    merge = false // if you want to merge data based on the confirm.txt across the multiple run plates, set to true. if you want to use only AESPA qc, set to false.
    blastn_db = ''
    // QC options
    lims_qc = true // if you want to use LIMS QC, set to true
    lims_call = true // if you want to use LIMS API calls, set to true
    target_x = 5 // target coverage human depth of subsampled reads
    coverage_limit = 40 // if the original coverage is greater than this value, subsampling will not be performed
    read_length = 151
    genome_size = 3000000000
    avg_read_size = 300
    sub_limit = 0.6 // if sub_ratio is less than this value, subsampling will be performed

    // QC parameters
    freemix_limit = 0.05 // upper limit of freemix value
    mapping_rate_limit = 90 // lower limit of mapping rate
    deduplicate_rate_limit = 80 // lower limit of deduplicate rate
    email = 'cerutx@gmail.com'
    api_call = false
}

// Validate and set aligner based on genome
if (params.genome == 'GRCh38' || params.genome == 'local') {
    params.available_aligners = ['bwa', 'iSAAC']
} else {
    params.available_aligners = ['iSAAC']
}

// Validate aligner selection
if (!params.available_aligners.contains(params.aligner)) {
    if (params.genome == 'GRCh38' || params.genome == 'local') {
        println "ERROR: Invalid aligner '${params.aligner}' for genome '${params.genome}'. Available aligners: ${params.available_aligners.join(', ')}"
    } else {
        println "ERROR: Only 'bwa' aligner is available for genome '${params.genome}'. iSAAC is only available with GRCh38 or local genome."
        params.aligner = 'bwa'
    }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    test {
        includeConfig 'conf/test.config'
        conda.enabled = true
        conda.prefix  = '/opt/conda/envs'
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        process.container = 'aespa-preprocessing:latest'
        docker.enabled = true
        docker.userEmulation   = true
        conda.enabled         = false
        singularity.enabled   = false
        podman.enabled        = false
        shifter.enabled       = false
        charliecloud.enabled  = false
        apptainer.enabled     = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        process.container = 'aespa-preprocessing:latest'
        singularity.enabled = true
        singularity.autoMounts = true
        conda.enabled         = false
        docker.enabled        = false
        podman.enabled        = false
        shifter.enabled       = false
        charliecloud.enabled  = false
        apptainer.enabled     = false
    }
    podman {
        podman.enabled        = true
        conda.enabled         = false
        docker.enabled        = false
        singularity.enabled   = false
        shifter.enabled       = false
        charliecloud.enabled  = false
        apptainer.enabled     = false
    }
    shifter {
        shifter.enabled       = true
        conda.enabled         = false
        docker.enabled        = false
        singularity.enabled   = false
        podman.enabled        = false
        charliecloud.enabled  = false
        apptainer.enabled     = false
    }
    charliecloud {
        charliecloud.enabled  = true
        conda.enabled         = false
        docker.enabled        = false
        singularity.enabled   = false
        podman.enabled        = false
        shifter.enabled       = false
        apptainer.enabled     = false
    }
    apptainer {
        apptainer.enabled     = true
        conda.enabled         = false
        docker.enabled        = false
        singularity.enabled   = false
        podman.enabled        = false
        shifter.enabled       = false
        charliecloud.enabled  = false
    }
    sge {
        conda.enabled = true
        conda.useMamba = true
        process {
            executor = 'sge'
            scratch = true
            stageOutMode = 'move'
            errorStrategy = 'retry'
            retry.delay = '600 sec'
            maxRetries = 3
            pollInterval = '60 sec'
            queue = 'all.q'
            penv = 'smp'
            clusterOptions = { "-cwd -v PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:\$PATH -pe peXMAS ${task.cpus} -S /bin/bash" }
        }
    }
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
        }
    }
    lsf {
        process {
            executor = 'lsf'
        }
    }
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = 'job-queue-name'
            aws.region = 'region-name'
        }
    }
    google {
        process {
            executor = 'google-lifesciences'
            google.location = 'europe-west2'
            google.region  = 'europe-west2'
            google.project = 'your-project-id'
        }
    }
    azure {
        process {
            executor = 'azurebatch'
        }
    }
    k8s {
        process {
            executor = 'k8s'
            pod = [[nodeSelector:'node-type=compute']]
        }
        k8s {
            namespace = 'default'
            serviceAccount = 'nf-sa'
        }
    }
}

env {
    GATK3 = "${baseDir}/apps/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar"
}

report.overwrite = true
timeline.overwrite = true
dag.overwrite = true
trace.overwrite = true

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
cleanup = true
