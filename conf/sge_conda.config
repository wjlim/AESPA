conda.enabled = true

process {
    executor = 'sge'
    memory = { check_max( 12.GB * task.attempt, 'cpus') }
    time = { check_max( 1.h * task.attempt, 'time') }
    cpus = {check_max(1 * task.attempt, 'cpus')}

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries = 2

    queue = 'all.q'
    penv = 'smp'
    clusterOptions = { "-cwd -pe peXMAS ${task.cpus} -S /bin/bash" }

    withLabel:process_single {
        memory = { check_max( 8.GB * task.attempt, 'cpus') }
        time = { check_max( 1.h * task.attempt, 'time') }
        cpus = { check_max(1 * task.attempt, 'cpus')}
    }
    withLabel:process_low {
        memory = { check_max( 16.GB * task.attempt, 'cpus') }
        time = { check_max( 1.h * task.attempt, 'time') }
        cpus = { check_max(2 * task.attempt, 'cpus')}
    }
    withLabel:process_small {
        memory = { check_max( 32.GB * task.attempt, 'cpus') }
        time = { check_max( 1.h * task.attempt, 'time') }
        cpus = { check_max(4 * task.attempt, 'cpus')}
    }
    withLabel:process_medium {
        memory = { check_max( 64.GB * task.attempt, 'cpus') }
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max( 8 * task.attempt, 'cpus')}
    }
    withLabel:process_high {
        memory = { check_max( 120.GB * task.attempt, 'cpus') }
        time = { check_max( 2.h * task.attempt, 'time') }
        cpus = { check_max( 16 * task.attempt, 'cpus')}
    }
    withLabel:process_local {
        executor = 'local'
        memory = 2.GB
        time = 1.h
        cpus = 1
    }
}



env = [
    GATK3: "$baseDir/apps/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar",
]

// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            return obj
        }
    }
}

